return {
  -- TODO: this template is out of date...
  s({ trig = "template CMakeLists.txt", desc = "template for root CMakeLists.txt" }, {
    t({
      "cmake_minimum_required(VERSION 3.15...3.30)",
      "",
      "# set(CMAKE_OSX_SYSROOT \"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.0.sdk\")",
      "",
      "project(" }), i(1), t({ " VERSION 1.0", "  DESCRIPTION \"" }), i(2), t({ "\"",
    "  LANGUAGES CXX",
    " )",
    "",
    "set(CMAKE_CXX_STANDARD 20)",
    "set(CMAKE_CXX_STANDARD_REQUIRED ON)",
    "set(CMAKE_EXPORT_COMPILE_COMMANDS ON)",
    "# symlink compile_commands.json in source and build.",
    "file(CREATE_LINK",
    "  \"${CMAKE_BINARY_DIR}/compile_commands.json\"",
    "  \"${CMAKE_SOURCE_DIR}/compile_commands.json\"",
    "  SYMBOLIC",
    ")",
    "",
    "option(DEBUG \"debug mode\" ON)",
    "",
    "add_library(compilerflags INTERFACE)",
    "",
    "# TODO use the built in debug option?",
    "if (DEBUG)",
    "target_compile_options(compilerflags INTERFACE",
    "  \"-g;-Wall;-Werror;-Wextra;-Wshadow;-Wformat=2;-Wunused;-fsanitize=address\"",
    ")",
    "target_link_options(compilerflags INTERFACE",
    "  \"-fsanitize=address\"",
    ")",
    "endif()",
    "",
    "include(CMakePrintHelpers)",
    "cmake_print_properties(TARGETS ${PROJECT_NAME} PROPERTIES INCLUDE_DIRECTORIES)",
    "",
    "option(PACKAGE_TESTS \"build the tests\" ON)",
    "if (PACKAGE_TESTS)",
    "  enable_testing()",
    "  include(GoogleTest)",
    "  add_subdirectory(tests)",
    "endif()",
    "",
    "# uninstall target",
    "if(NOT TARGET uninstall)",
    "  configure_file(",
    "    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in\"",
    "    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"",
    "    IMMEDIATE @ONLY)",
    "",
    "  add_custom_target(uninstall",
    "    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)",
    "endif()",
  })
  }
  ),
  s({ trig = "template test/CMakeLists.txt", desc = "template for CMakeLists.txt with macros" }, {
    t({ "macro(package_add_test TESTNAME)",
      "# create an executable in which the tests will be stored",
      "add_executable(${TESTNAME} ${ARGN})",
      "# link the Google test infrastructure, mocking library, and a default main function to",
      "# the test executable.  Remove g_test_main if writing your own main function.",
      "target_link_libraries(${TESTNAME} gtest gmock gtest_main)",
      "# gtest_discover_tests replaces gtest_add_tests,",
      "# see https://cmake.org/cmake/help/v3.10/module/GoogleTest.html for more options to pass to it",
      "gtest_discover_tests(${TESTNAME}",
      "# set a working directory so your project root so that you can find test data via paths relative to the project root",
      "WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}",
      "PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"",
      ")",
      "set_target_properties(${TESTNAME} PROPERTIES FOLDER tests)",
      "endmacro()",
      "",
      "# package_add_test(test1 test1.cpp)",
      "",
      "# macro(package_add_test_with_libraries TESTNAME FILES LIBRARIES INCLUDE TEST_WORKING_DIRECTORY)",
      "macro(package_add_test_with_libraries TESTNAME FILES LIBRARIES TEST_WORKING_DIRECTORY)",
      "add_executable(${TESTNAME} ${FILES})",
      "# target_include_directories(${TESTNAME} PRIVATE ${INCLUDE})",
      "target_link_libraries(${TESTNAME} gtest gmock gtest_main ${LIBRARIES})",
      "gtest_discover_tests(${TESTNAME}",
      "WORKING_DIRECTORY ${TEST_WORKING_DIRECTORY}",
      "PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY \"${TEST_WORKING_DIRECTORY}\"",
      ")",
      "set_target_properties(${TESTNAME} PROPERTIES FOLDER tests)",
      "endmacro()",
      "",
      "# package_add_test_with_libraries(BasicTest basic.cpp mylibpq \"${PROJECT_SOURCE_DIR}/include\" \"\")",
      "package_add_test_with_libraries(BasicTest basic.cpp mylibpq \"\")",
      "target_include_directories(BasicTest PUBLIC \"${PROJECT_SOURCE_DIR}/include\" )",
      "",
      "package_add_test_with_libraries(CursorTest cursor.cpp mylibpq \"\")",
      "target_include_directories(CursorTest PUBLIC \"${PROJECT_SOURCE_DIR}/include\" ) " }
    )
  }),
  s({ trig = "template cmake root test", desc = "template for root cmake file for packaging tests" }, {
    t({
      "option(PACKAGE_TESTS \"build the tests\" ON)",
      "if (PACKAGE_TESTS)",
      "  enable_testing()",
      "  include(GoogleTest)",
      "  add_subdirectory(\"extern/googletest\")",
      "  add_subdirectory(tests)",
      "endif()"
    })
  }),
  s({ trig = "template cmake_uninstall.cmake.in", desc = "template to generate uninstall rule" }, {
    t({
      "if(NOT EXISTS \"@CMAKE_BINARY_DIR@/install_manifest.txt\")",
      "    message(FATAL_ERROR \"Cannot find install manifest: @CMAKE_BINARY_DIR@/install_manifest.txt\")",
      "endif()",
      "",
      "    file(READ \"@CMAKE_BINARY_DIR@/install_manifest.txt\" files)",
      "    string(REGEX REPLACE \"\\n\" \";\" files \"${files}\")",
      "foreach(file ${files})",
      "    message(STATUS \"Uninstalling $ENV{DESTDIR}${file}\")",
      "    if(IS_SYMLINK \"$ENV{DESTDIR}${file}\" OR EXISTS \"$ENV{DESTDIR}${file}\")",
      "    execute_process(",
      "            COMMAND \"@CMAKE_COMMAND@\" -E remove \"$ENV{DESTDIR}${file}\"",
      "            OUTPUT_VARIABLE rm_out",
      "            RESULT_VARIABLE rm_retval",
      "            )",
      "    if(NOT \"${rm_retval}\" STREQUAL 0)",
      "    message(FATAL_ERROR \"Problem when removing $ENV{DESTDIR}${file}\")",
      "endif()",
      "    else(IS_SYMLINK \"$ENV{DESTDIR}${file}\" OR EXISTS \"$ENV{DESTDIR}${file}\")",
      "    message(STATUS \"File $ENV{DESTDIR}${file} does not exist.\")",
      "    endif()",
      "endforeach()"
    })
  })
}
